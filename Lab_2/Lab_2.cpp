// Lab_2.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <locale.h>
#include <tgmath.h>
using namespace std;

//Инициализация функций с задачами
void task1();
void task2();
void task3();
void task4();
void task5();

//Инициализация вспомогательных функций

int main()
{
    //Подключаем русский язык
    setlocale(LC_ALL, "Rus");
    //Задача №1
    //task1();
    //Задача №2
    //task2();
    //Задача №3
    //task3();
    //Задача №4
    //task4();
    //Задача №5
    task5();
}

void task1()
{
    //Ограничение числа строк треугольника паскаля
    int N;
    scanf_s("%i", &N);
    //Выделение памяти под строки треугольника паскаля
    unsigned long long** StrArr = (unsigned long long**)calloc(N + 1, sizeof(unsigned long long*));
    //Если не удалось выделить память, то выдаем ошибку и завершаем выполнение работы программы 
    if (!StrArr)
    {
        printf("Error, there is no memory\n");
        return;
    }
    //Выделяем память под каждую строку в треугольнике паскаля
    for (int i = 0; i < N + 1; i++)
    {
        StrArr[i] = (unsigned long long*)calloc(i + 1, sizeof(unsigned long long));
        //Если не удалось выделить память под строку в треугольнике, то выдаем ошибку и завершаем выполнение работы программы + освобождаем ранее выделенную память
        if (!StrArr[i])
        {
            printf("Error, there is no memory\n");
            for (int j = 0; j < i; j++)
            {
                free(StrArr[j]);
            }
            free(StrArr);
        }
        //Начальные и конечные коэффиценты приравниваем к 1
        StrArr[i][0] = 1;
        StrArr[i][i] = 1;
    }
    //Вычисляем значения биномиальных коэффицентов (кроме крайних)
    for (int i = 2; i <= N; i++)
    {
        for (int k = 1; k < i; k++)
        {
            StrArr[i][k] = StrArr[i - 1][k - 1] + StrArr[i - 1][k];
        }
    }
    //Выводим треугольник на экран
    for (int i = 0; i <= N; i++)
    {
        for (int j = 0; j <= i; j++)
        {
            printf("%llu ", StrArr[i][j]);
        }
        //Переход на следующию строку
        printf("\n");
    }
    //Освобождаем выделенную память
    for (int i = 0; i <= N; i++)
    {
        free(StrArr[i]);
    }
    free(StrArr);
}

void task2()
{
    //Ограничение числа строк треугольника паскаля
    int N;
    scanf_s("%i", &N);
    //Идем по строкам треугольника Паскаля
    for (int i = 0; i <= N; i++)
    {
        //Принимая биномиальные коэффициенты за число сочетаний из i по k считаем их и записываем 
        for (int k = 0; k <= i; k++)
        {
            double C = tgamma(i + 1) / (tgamma(k + 1) * tgamma((i - k) + 1));
            printf("%.lf ", C);
        }
        //Перевод строки
        printf("\n");
    }
}

void task3()
{
    //Ограничение числа строк треугольника паскаля
    int N;
    scanf_s("%i", &N);
    //Выделение памяти под строки треугольника паскаля
    double** StrArr = (double**)calloc(N + 1, sizeof(double*));
    //Если не удалось выделить память, то выдаем ошибку и завершаем выполнение работы программы 
    if (!StrArr)
    {
        printf("Error, there is no memory\n");
        return;
    }
    //Выделяем память под каждую строку в треугольнике паскаля
    for (int i = 0; i < N + 1; i++)
    {
        StrArr[i] = (double*)calloc(i + 1, sizeof(double));
        //Если не удалось выделить память под строку в треугольнике, то выдаем ошибку и завершаем выполнение работы программы + освобождаем ранее выделенную память
        if (!StrArr[i])
        {
            printf("Error, there is no memory\n");
            for (int j = 0; j < i; j++)
            {
                free(StrArr[j]);
            }
            free(StrArr);
        }
        //Начальные и конечные коэффиценты приравниваем к 1
        StrArr[i][0] = 1;
        StrArr[i][i] = 1;
    }
    //Вычисляем значения биномиальных коэффицентов (кроме крайних)
    for (int i = 2; i <= N; i++)
    {
        for (int k = 1; k < i; k++)
        {
            StrArr[i][k] = StrArr[i - 1][k - 1] + StrArr[i - 1][k];
        }
    }
    //Выводим треугольник на экран
    for (int i = 0; i <= N; i++)
    {
        for (int j = 0; j <= i; j++)
        {
            printf("%.lf ", StrArr[i][j]);
        }
        //Переход на следующию строку
        printf("\n");
    }
    //Освобождаем выделенную память
    for (int i = 0; i <= N; i++)
    {
        free(StrArr[i]);
    }
    free(StrArr);
}

void task4()
{
    //Количество запросов
    int Q,
        //Числа,по которым считается соответсвующий биномиальный коэффицент
        k, n;
    //Получаем количество запросов
    scanf_s("%i", &Q);
    //Запрашиваем числа заданное количество раз
    for (int i = 0; i < Q; i++)
    {
        //Сканируем числа,по которым считается соответсвующий биномиальный коэффицент
        scanf_s("%i %i", &n, &k);
        //Если k < 0 или k > n, то такой биномиальный коэффицент = 0 по опеделению

        double C = 1;
        for (int j = 0; j < k; j++)
        {
            C = C * (n - j) / (j + 1);
        }



        printf("%.lf\n", C);
        //if ((k < 0)||(k > n))
        //{
        //    printf("0\n");
        //}
        ////Иначе считаем соответсвующий биномиальный коэффицент, принимая его за количество сочетаний из n по k
        //else
        //{

        //  
        //        double C = 1;
        //        for (int i = 0; i < k; i++)
        //        {
        //            C = C * (n - i) / (i + 1);
        //        }



        //        printf("%0.10g\n", C);
        //    
        //    //C = 1;
        //    //for (int i = 0; i < k; i++)
        //    //{
        //    //    C = C * (n - i) / (i + 1);
        //    //}
        //    ////Выводим коэффицент на экран
        //    //printf("%0.10g\n", C);
        //}
    }
}

void task5()
{
    //Количество запросов
    int T,
        //Числа,по которым считается соответсвующий биномиальный коэффицент
        k, n,
        //Число, по которому нужно найти остаток от деления биномиального коэффицента на это число
        M;
    scanf_s("%i%i", &M, &T);
    for (int i = 0; i < T; i++)
    {
        scanf_s("%i%i", &n, &k);
        if ((k < 0) || (k > n))
        {
            printf("0\n");
        }
        else
        {
            unsigned long long C = 1;
            for (int j = 0; j < k; j++)
            {
                C = C * (n - j) / (j + 1);
            }
            double P = C % M;
            printf("%0.10g\n", P);
        }

    }

}





// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
